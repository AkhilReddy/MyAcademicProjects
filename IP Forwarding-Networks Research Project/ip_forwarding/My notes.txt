In computer networking, large receive offload (LRO) is a technique for increasing inbound throughput of 
high-bandwidth network connections by reducing CPU overhead.

LRO packets are dropped in forwarding.LRO is Performance 
optimization technique that merges packets together,creating
one large SKB, before they are passed to higher
network layers.This reduces CPU overhead and thus improves
the performance.Forwarding a large SKB,which was built by LRO,
is not acceptable bcz it will be large than the outgoing MTU.
Therfore, when LRO is enabled the SKB is freed and mthod returns
NET_RX_DROP.Generic Receive Offload(GRO) design included forwarding
ability,but LRO didnot:


 if (skb_warn_if_lro(skb))
             goto drop;

drop:
        kfree_skb(skb);
        return NET_RX_DROP;
---------------------------------------------------------------------
If the router_alert option is set,the ip_call_ra_chain() method should
be invoked to handle the packet.When calling setsocket() with 
IP_ROUTER_ALERT on raw socket,socket is added to a global list
named ip_ra_chain().The ip_call_ra_chain() method delivers the packet
to all raw sockets.In raw packets there is no proper ports which 
socets listen(X to TCP/UDP) so w are sending to all raw's.

If the pkt_type which is determined by eth_type_trans() methosd,which
should be called from the network driver and which is  not PACKET_HOST,
packt is discarded.

if (IPCB(skb)->opt.router_alert && ip_call_ra_chain(skb))
                  return NET_RX_SUCCESS;

if (skb->pkt_type != PACKET_HOST)
                 goto drop;

-----------------------------------------------------------------
TTL field of IPV4 header is a conuter which is decrsed by 1 in each
forwarding device.If the ttl reaches 0,that is an indication that the
packet should be dropped and that a correspoding time exceeded ICMPv4
message with "TTL Count Exceeded" code should be snt.

     According to the RFC, we must first decrease the TTL field. If
     that reaches zero, we must reply an ICMP control message telling
     that the packet's lifetime expired.
       

        if (ip_hdr(skb)->ttl <= 1)
                goto too_many_hops;
 
too_many_hops:
It's like tlling the sender its packet died.

IP_INC_STATS(dev_net(rt->dst.dev), IPSTATS_MIB_FRAGFAILS);
icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,0);

----------------------------------------------------------------------
Now a check is performed if both the strict route flag(is_strictroute)
is set and rt_uses_gateway flag is 
set,in such a case,strict routing cannot be applied,and a "Destination
Unreachable"ICMPv4 message with "Strict Routing Failed" code is sent back:

rt = skb_rtable(skb);
if (opt->is_strictroute && rt->rt_uses_gateway)
                 goto sr_failed;

sr_failed:Strict routing permits no gatewaying
icmp_send(skb, ICMP_DEST_UNREACH, ICMP_SR_FAILED,0);
goto drop;

-------------------------------------------------------------------------
Now a ceck is performed to see whether the length of the packet is larger
than the outgoing device MTU.If it is, that means the packet is not prmitted 
to be sent as it is. Another check is performed to see whether the 
DF ==> Don't Fragment field in the IPv4 header is set and whether the local_df
flag in the sKB is not set.If thse conditions ar met,it means that when the 
packet raches the ip_output() mthod,it will not be fragmented with the 
ip_fragment() method.This means the packet cannot be sent as in,and it also
cannot cannot fragmented with the ip_fragment() method.This means the packet 
cannot be sent as is, and it also cannot be fragmented;so a destination 
unreachable ICMPv4 message with "Fragmention Needed" code is sent back,the
packet is dropped, and the statistics(IPSTATS_MIB_FRAGMENTS) are updated:
  
  IPCB(skb)->flags |= IPSKB_FORWARDED;
         mtu = ip_dst_mtu_maybe_forward(&rt->dst, true);
        if (ip_exceeds_mtu(skb, mtu)) {
                IP_INC_STATS(dev_net(rt->dst.dev), IPSTATS_MIB_FRAGFAILS);
                 icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
                          htonl(mtu));
                 goto drop;
         }
---------------------------------------------------------------------------
Bcz the ttl and checksum of the IPV4 header are going to be changed, a copy
of the skb should be kept:

/* We are about to mangle packet. Copy it! */
         if (skb_cow(skb, LL_RESERVED_SPACE(rt->dst.dev)+rt->dst.header_len))
                goto drop;
        iph = ip_hdr(skb);

-------------------------------------------------------------------------
Result of ttl change and checksumare also updated accordingly in i_decrese_ttl()

/* Decrease ttl after skb cow done */
        ip_decrease_ttl(iph);

----------------------------------------------------------------------------

Now a redirect ICMPv4 message is sent back.If the RTCF_DOREDIRECT flag of
the routing entry is set then a "Redirect To Host" code is used for this message

/*
          *      We now generate an ICMP HOST REDIRECT giving the route
          *      we calculated.
          */
        if (IPCB(skb)->flags & IPSKB_DOREDIRECT && !opt->srr && !skb_sec_path(skb))
                ip_rt_send_redirect(skb);

----------------------------------------------------------------------------

The skb->priority in the Tx Path is set to be the socket priority
( skb->priority). socket priority,inturn ,can be set by calling setsocket()
 system call with SOL_SOCKET and SO_PRIORITY.How ever,when forwarding the
packet,there is no socket attached to the skb.So in the ip_forward() method
and skb-> priority is set accordingly to a special table called ip_tos2prio.
This table has 16 entries(I got it from route.h file...Just for refence I addded).

 skb->priority = rt_tos2priority(iph->tos);

----------------------------------------------------------------------------
Now assuming that there are no neither NF_INET_FORWARD invokes,ip_forward_finish()
method 

return NF_HOOK(NFPROTO_IPV4, NF_INET_FORWARD, NULL, skb,
               skb->dev, rt->dst.dev, ip_forward_finish);

In ip_forward_finish(),the statics are updated and we check that IPv4 packet include
IP options.If it does,ip_forward_options()method is invoked to handle the options.
If it doen't have options,the dst_output() method is called.The only thing
this method deos is invoke skb_dst(skb)->outout(skb):

 
  static int ip_forward_finish(struct sock *sk, struct sk_buff *skb)
  {
          struct ip_options *opt  = &(IPCB(skb)->opt);
  
          IP_INC_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_OUTFORWDATAGRAMS);
          IP_ADD_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_OUTOCTETS, skb->len);
  
          if (unlikely(opt->optlen))
                  ip_forward_options(skb);
  
          skb_sender_cpu_clear(skb);
          return dst_output_sk(sk, skb);
  }



So by this code we earned about methods for forwarding Packets(ip_forward() 
and ip_forward_finish()),
about cases when a packet is discarded in forwarding,about cases when an 
ICMP redirect is sent and othrs.